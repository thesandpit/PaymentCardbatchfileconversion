//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommonLib.ColumbusServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ColumbusServiceReference.IColumbusArchService")]
    public interface IColumbusArchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IColumbusArchService/RunTask", ReplyAction="http://tempuri.org/IColumbusArchService/RunTaskResponse")]
        bool RunTask(bool isProduction, string userName, string password, string archiveName, string taskName, string[] archiveXmlPath, string[] lstPdfsToArchive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IColumbusArchService/RunTask", ReplyAction="http://tempuri.org/IColumbusArchService/RunTaskResponse")]
        System.Threading.Tasks.Task<bool> RunTaskAsync(bool isProduction, string userName, string password, string archiveName, string taskName, string[] archiveXmlPath, string[] lstPdfsToArchive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IColumbusArchService/RunSimplyEnergyTask", ReplyAction="http://tempuri.org/IColumbusArchService/RunSimplyEnergyTaskResponse")]
        bool RunSimplyEnergyTask(bool isProduction, string userName, string password, string[] archiveXmlPath, string[] lstPdfsToArchive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IColumbusArchService/RunSimplyEnergyTask", ReplyAction="http://tempuri.org/IColumbusArchService/RunSimplyEnergyTaskResponse")]
        System.Threading.Tasks.Task<bool> RunSimplyEnergyTaskAsync(bool isProduction, string userName, string password, string[] archiveXmlPath, string[] lstPdfsToArchive);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IColumbusArchServiceChannel : CommonLib.ColumbusServiceReference.IColumbusArchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ColumbusArchServiceClient : System.ServiceModel.ClientBase<CommonLib.ColumbusServiceReference.IColumbusArchService>, CommonLib.ColumbusServiceReference.IColumbusArchService {
        
        public ColumbusArchServiceClient() {
        }
        
        public ColumbusArchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ColumbusArchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ColumbusArchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ColumbusArchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RunTask(bool isProduction, string userName, string password, string archiveName, string taskName, string[] archiveXmlPath, string[] lstPdfsToArchive) {
            return base.Channel.RunTask(isProduction, userName, password, archiveName, taskName, archiveXmlPath, lstPdfsToArchive);
        }
        
        public System.Threading.Tasks.Task<bool> RunTaskAsync(bool isProduction, string userName, string password, string archiveName, string taskName, string[] archiveXmlPath, string[] lstPdfsToArchive) {
            return base.Channel.RunTaskAsync(isProduction, userName, password, archiveName, taskName, archiveXmlPath, lstPdfsToArchive);
        }
        
        public bool RunSimplyEnergyTask(bool isProduction, string userName, string password, string[] archiveXmlPath, string[] lstPdfsToArchive) {
            return base.Channel.RunSimplyEnergyTask(isProduction, userName, password, archiveXmlPath, lstPdfsToArchive);
        }
        
        public System.Threading.Tasks.Task<bool> RunSimplyEnergyTaskAsync(bool isProduction, string userName, string password, string[] archiveXmlPath, string[] lstPdfsToArchive) {
            return base.Channel.RunSimplyEnergyTaskAsync(isProduction, userName, password, archiveXmlPath, lstPdfsToArchive);
        }
    }
}
